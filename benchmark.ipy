#!/usr/bin/env ipython

from configobj import ConfigObj
import boto3
import csv
import time

print "Reading EC2 credentials file..."
with open('credentials.csv', 'rb') as credfile:
    reader = csv.DictReader(credfile)
    row = reader.next()
    access_key_id = row["Access Key Id"]
    secret_access_key = row["Secret Access Key"]


config = ConfigObj('benchmark.ini')

btrdb_nodes = config['btrdb_nodes']
num_btrdb_nodes = int(btrdb_nodes['num_btrdb_nodes'])
if num_btrdb_nodes < 1:
    print "Need at least 1 BTrDB node: {0} specified".format(num_btrdb_nodes)
    exit()
    
if num_btrdb_nodes > 4:
    print "SANITY CHECK FAILED: too many BtrDB nodes (max is 4)"
    exit()
    
ssds_per_node = int(btrdb_nodes['ssds_per_node'])
if ssds_per_node < 1:
    print "Need at least 1 additional SSD per node: {0} specified".format(ssds_per_node)
    exit()
    
if ssds_per_node > 5:
    print "SANITY CHECK FAILED: too many SSDs per node (max is 5)"
    exit()
    
ssd_gb = int(btrdb_nodes['ssd_gb'])
if ssd_gb < 4 or ssd_gb > 32:
    print "SANITY CHECK FAILED: SSD size must be between 4 GB and 32 GB"
    exit()
    


"""
btrdb_server = config['btrdb_server']
loadgen_server = config['loadgen_server']

btrdb_user = btrdb_server['user']
btrdb_host = btrdb_server['host']

loadgen_user = loadgen_server['user']
loadgen_host = loadgen_server['host']
"""

#print "Generating ssh key..."
#!yes | ssh-keygen -N "" -f "assets/key"

"""
public_key_file = open("assets/key.pub", "rb")
public_key2 = public_key_file.read()
public_key_file.close()
"""

print "Connecting to Amazon EC2..."
ec2 = boto3.resource('ec2', aws_access_key_id=access_key_id, aws_secret_access_key=secret_access_key, region_name="us-east-1")
#kpi = ec2.import_key_pair(DryRun=True, KeyName='btrdb_test_key', PublicKeyMaterial=bytes(public_key))
vpc = ec2.Vpc("vpc-ffc37f9b")
#vpc.create_security_group(DryRun=True, GroupName='btrdb-test', Description='Test Infrastructure')

driveids = [chr(ord('b') + i) for i in xrange(ssds_per_node)]
drives = " ".join(driveids)

rootblockdevice = {"DeviceName": "/dev/sda1", "Ebs": {"VolumeSize": 16, "VolumeType": "gp2", "DeleteOnTermination": True}}
blockdevices = [{"DeviceName": "/dev/sd{0}".format(driveid), "Ebs": {"VolumeSize": ssd_gb, \
                 "VolumeType": "gp2", "DeleteOnTermination": True}} for driveid in driveids]
blockdevices.append(rootblockdevice)

instances = ec2.create_instances(DryRun=False, ImageId="ami-df0607b5", InstanceType="t2.medium", \
                                 NetworkInterfaces=[{"DeviceIndex": 0, "SubnetId": "subnet-c0ccc299", \
                                 "Groups": ['sg-2503365d'], "DeleteOnTermination": True, \
                                 "AssociatePublicIpAddress": True}], BlockDeviceMappings=blockdevices, \
                                 Monitoring={"Enabled": False}, MinCount=num_btrdb_nodes, MaxCount=num_btrdb_nodes, \
                                 KeyName='btrdb_test_key', Placement={"AvailabilityZone": "us-east-1d"}) \

print "Wait for instances to start..."
for instance in instances:
    instance.wait_until_running()
    
# For some reason, I need to wait for some more time for the instances to become usable
time.sleep(120)
    
hostnames = []
public_ips = []
local_ips = []
print "Gathering instance metadata..."
for instance in instances:
    instance.load()
    eth0 = instance.network_interfaces_attribute[0]
    #public_ip = eth0["Association"]["PublicIp"]
    #public_hostname = eth0["Association"]["PublicDnsName"]
    #local_ip = eth0["PrivateIpAddresses"][0]["PrivateIpAddress"]
    #private_hostname = eth0["PrivateIpAddresses"][0]["PrivateDnsName"]
    
    public_ip = instance.public_ip_address
    local_ip = instance.private_ip_address
    private_hostname = instance.private_dns_name.split(".")[0]
    
    public_ips.append(public_ip)
    local_ips.append(local_ip)
    hostnames.append(private_hostname)
    
btrdb_user = "ubuntu"
btrdb_host = public_ips[0]
btrdb_private_ip = local_ips[0]
loadgen_user = "ubuntu"
loadgen_host = public_ips[0]
loadgen_private_ip = local_ips[0]

print "Preparing for deployment..."
with open("assets/hostfile", "w") as hostfile:
    for i in xrange(len(hostnames)):
        hostfile.write("{0} {1}\n".format(local_ips[i], hostnames[i]))

"""
btrdb_user = "ubuntu"
btrdb_host = "52.91.85.0"
btrdb_private_ip = "10.0.0.170"
loadgen_user = btrdb_user
loadgen_host = btrdb_host
loadgen_private_ip = btrdb_private_ip
"""

def setup_node(user, host, ceph = False):
    !scp -i assets/key -o StrictHostKeyChecking=no -r assets {user}@{host}:~
    if ceph:
        !ssh -i assets/key -o StrictHostKeyChecking=no {user}@{host} "sudo ./assets/install.sh -c {drives}"
    else:
        !ssh -i assets/key -o StrictHostKeyChecking=no {user}@{host} "sudo ./assets/install.sh"

# Utility functions for the BTrDB node
    
def _btrdb(user, host, configpath, options):
    !ssh -i assets/key -o StrictHostKeyChecking=no {user}@{host} "cp {configpath} btrdb.conf && ./assets/btrdb.sh {options}"
    
def fresh_btrdb(ceph, user = btrdb_user, host = btrdb_host):
    if ceph:
        return _btrdb(user, host, "assets/btrdb_ceph.conf", "-f")
    else:
        return _btrdb(user, host, "assets/btrdb_fs.conf", "-f")
    
def restart_btrdb(ceph, user = btrdb_user, host = btrdb_host):
    if ceph:
        return _btrdb(user, host, "assets/btrdb_ceph.conf", "")
    else:
        return _btrdb(user, host, "assets/btrdb_fs.conf", "")
    
def stop_btrdb(user = btrdb_user, host = btrdb_host):
    return _btrdb(user, host, "/dev/null", "-q")
    
# Utility functions on the Load Generator node

CONFIG_BASE = """TOTAL_RECORDS=16777216
TCP_CONNECTIONS={0}
POINTS_PER_MESSAGE=4096
NANOS_BETWEEN_POINTS=1048576
MAX_TIME_RANDOM_OFFSET=1048575
FIRST_TIME=1420582217226125312
NUM_SERVERS=1
DB_ADDR1=%s:4410
NUM_STREAMS=1
STREAM_CONCURRENCY=1
UUID1=73ee2f1a-fdf8-450c-804e-89f9c3c35dfb
MAX_CONCURRENT_MESSAGES={1}
RAND_SEED=15
PERM_SEED=0
DETERMINISTIC_KV={2}
GET_MESSAGE_TIMES=false
STATISTICAL_PW={3}
""" % btrdb_private_ip

def get_config(TCP_CONNECTIONS=4, MAX_CONCURRENT_MESSAGES=12, DETERMINISTIC_KV=False, STATISTICAL_PW=-1):
    DETERMINISTIC_KV = "true" if DETERMINISTIC_KV else "false"
    return CONFIG_BASE.format(TCP_CONNECTIONS, MAX_CONCURRENT_MESSAGES, DETERMINISTIC_KV, STATISTICAL_PW)
    
def benchmark_insert(name, config, user = loadgen_user, host = loadgen_host):
    !ssh -i assets/key -o StrictHostKeyChecking=no {user}@{host} "echo '{config}' > loadConfig.ini && loadgen -i > loadgen-output/{name}_insert"; echo $?
    
def benchmark_query(name, config, user = loadgen_user, host = loadgen_host):
    !ssh -i assets/key -o StrictHostKeyChecking=no {user}@{host} "echo '{config}' > loadConfig.ini && loadgen -q > loadgen-output/{name}_query && loadgen -v > loadgen-output/{name}_verify"; echo $?
    
    
# First, set up the two nodes
print "Setting up BTrDB node..."
setup_node(btrdb_user, btrdb_host, True)
print "Setting up Load Generator node"
setup_node(loadgen_user, loadgen_host)

# Start BTrDB
fresh_btrdb(ceph = False)
